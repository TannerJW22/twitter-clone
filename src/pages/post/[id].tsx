import { LoadingSpinner } from "@/components/LoadingSpinner";
import PostView from "@/components/PostView";
import { prisma } from "@/server/db";
import { api } from "@/utils/api";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

const PostDetailPage: NextPage<PostDetailPageProps> = ({ postId }) => {
  const { data: enhancedPost, isLoading: enhancedPostIsLoading } =
    api.posts.getSinglePostById.useQuery({ id: postId });

  if (enhancedPostIsLoading)
    return (
      <div>
        <LoadingSpinner displayType="full" size={50} />
      </div>
    );
  if (!enhancedPost) return <div>404 | Post Not Found</div>;

  const { post, author } = enhancedPost;

  return (
    <>
      <Head>
        <title>{`${post.content} - @${author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-slate-700 md:max-w-2xl">
          <div className="mt-32 flex flex-col gap-4 md:max-w-2xl">
            <div className="flex justify-center border-b border-slate-700 py-5 md:max-w-2xl">
              <Link href={"/"}>
                <img
                  className="w-15 h-12"
                  src="/img/twitter-logo.png"
                  alt="twitter logo"
                />
              </Link>
            </div>
            <PostView
              post={post}
              author={author}
              timeDisplay="calendar"
              disabled
            />
          </div>
        </div>
      </main>
    </>
  );
};

export interface PostDetailPageProps {
  postId: string;
}

export const getStaticPaths = async () => {
  const postIds = await prisma.post.findMany({
    select: {
      id: true,
    },
  });

  let paths = postIds.map((postId) => `/post/${postId.id}`);

  return {
    paths: paths,
    fallback: "blocking",
  };
};

export const getStaticProps = async (ctx: any) => {
  const postId = ctx.params.id;

  return {
    props: {
      postId,
    },
  };
};

export default PostDetailPage;
